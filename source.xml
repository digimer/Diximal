<?xml version="1.0"?>
<cluster name="an-cluster" config_version="14">
	
	<!-- Cluster Nodes -->
	<clusternodes>
		<!-- AN!Cluster Node 1 -->
		<!-- 
		The clusternode 'name' value must match the name returned by
		`uname -n`. The network interface with the IP address mapped to
		this name will be the network used by the totem ring. The totem
		ring is used for cluster communication and reconfiguration, so
		all nodes must use network interfaces on the same network for
		the cluster to form. For the same reason, this name must not
		resolve to the localhost IP address (127.0.0.1/::1).
 
		Optional <clusternode ...> arguments:
		- weight="#"; This sets the DLM lock directory weight. This is
		              a DLM kernel option.
		-->
		<clusternode name="an-node01.alteeve.com" nodeid="1">
			<altname name="an-node01-sn" port="6899" 
							mcast="239.94.1.1" />
			<!-- Fence Devices attached to this node. -->
			<fence>
				<method name="node_assassin">
					<device name="batou" port="01"
							 action="reboot"/>
				</method>
			</fence>
		</clusternode>
 
		<!-- AN!Cluster Node 2 -->
		<clusternode name="an-node02.alteeve.com" nodeid="2">
			<altname name="an-node02-sn" port="6899"
							 mcast="239.94.1.1" />
			<fence>
				<method name="node_assassin">
					<device name="batou" port="02"
							 action="reboot"/>
				</method>
			</fence>
		</clusternode>
	</clusternodes>
	<!--
	The fence device is mandatory and it defined how the cluster will
	handle nodes that have dropped out of communication. In our case,
	we will use the Node Assassin fence device.
	-->
	<fencedevices>
		<!--
		This names the device, the agent (script) to controls it,
		where to find it and how to access it.
		-->
		<fencedevice name="batou" agent="fence_na" 
			ipaddr="batou.alteeve.com"  login="section9" 
			passwd="project2501" quiet="1"></fencedevice>
		<fencedevice name="motoko" agent="fence_na" 
			ipaddr="motoko.alteeve.com" login="section9" 
			passwd="project2501" quiet="1"></fencedevice>
		<!--
		If you have two or more fence devices, you can add the extra
		one(s) below. The cluster will attempt to fence a bad node
		using these devices in the order that they appear.
		-->
	</fencedevices>
 
	<!-- When the cluster starts, any nodes not yet in the cluster may be
	fenced. By default, there is a 6 second buffer, but this isn't very
	much time. The following argument increases the time window where other
	nodes can join before being fenced. I like to give up to one minute but
	the Red Hat man page suggests 20 seconds. Please do your own testing to
	determine what time is needed for your environment.
	-->
	<fence_daemon post_join_delay="60">
	</fence_daemon>
</cluster>

<!--
This is from the AN::Tools test 'words' file. It is for testing XML structures
not found in the cluster.conf sample file above.
-->

<words>
        <!-- Canadian English -->
        <name>test.xml</name>
        <version>0.0.001</version>
        <langs>en_CA,jp</langs>
        <lang name="en_CA" long_name="Canadian English">
                <key name="comment">Created by Madison Kelly (mkelly@alteeve.com) for the AN::Tools suite of perl modules - test alternate.</key>
        <!-- Test words. Do NOT change unless you update 't/String.t' or tests will needlessly fail. -->
                <key name="ta_0000">Alternate Test: [#!var!0!#].</key>
                <key name="ta_0001">This is a string <![CDATA[with a cdata tag and <example><xml string="foo" /></example> XML code]]>. So, did it work?</key>
        </lang>
        
        <!-- 日本語; UTF-8 Test tags. -->
        <lang name="jp" long_name="日本語">
                <key name="テス_0000">代りのテスト: [#!var!0!#]。</key>
        </lang>
</words>
